/*
 * immudb REST API
 *
 * <b>IMPORTANT</b>: All <code>get</code> and <code>safeget</code> functions return <u>base64-encoded</u> keys and values, while all <code>set</code> and <code>safeset</code> functions expect <u>base64-encoded</u> inputs.
 *
 * The version of the OpenAPI document: version not set
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SchemaDualProof {
    #[serde(rename = "sourceTxMetadata", skip_serializing_if = "Option::is_none")]
    pub source_tx_metadata: Option<Box<crate::models::SchemaTxMetadata>>,
    #[serde(rename = "targetTxMetadata", skip_serializing_if = "Option::is_none")]
    pub target_tx_metadata: Option<Box<crate::models::SchemaTxMetadata>>,
    #[serde(rename = "inclusionProof", skip_serializing_if = "Option::is_none")]
    pub inclusion_proof: Option<Vec<String>>,
    #[serde(rename = "consistencyProof", skip_serializing_if = "Option::is_none")]
    pub consistency_proof: Option<Vec<String>>,
    #[serde(rename = "targetBlTxAlh", skip_serializing_if = "Option::is_none")]
    pub target_bl_tx_alh: Option<String>,
    #[serde(rename = "lastInclusionProof", skip_serializing_if = "Option::is_none")]
    pub last_inclusion_proof: Option<Vec<String>>,
    #[serde(rename = "linearProof", skip_serializing_if = "Option::is_none")]
    pub linear_proof: Option<Box<crate::models::SchemaLinearProof>>,
}

impl SchemaDualProof {
    pub fn new() -> SchemaDualProof {
        SchemaDualProof {
            source_tx_metadata: None,
            target_tx_metadata: None,
            inclusion_proof: None,
            consistency_proof: None,
            target_bl_tx_alh: None,
            last_inclusion_proof: None,
            linear_proof: None,
        }
    }
}


